import React, { useState, useEffect } from "react";
import { initializeApp } from "firebase/app";
import { getAuth, signInWithCustomToken, signInAnonymously, onAuthStateChanged } from "firebase/auth";
import { getFirestore, collection, onSnapshot, addDoc, query, doc, updateDoc, arrayUnion, arrayRemove, deleteDoc } from "firebase/firestore";
import './App.css'; // Import the new stylesheet

// Main application component
const App = () => {
    // Firebase configuration from the environment
    const firebaseConfig = {
        apiKey: "AIzaSyDMf8dxE76Cg2WInANZCIPZ7fC31ni2AX4",
        authDomain: "forum-6180f.firebaseapp.com",
        projectId: "forum-6180f",
        storageBucket: "forum-6180f.firebasestorage.app",
        messagingSenderId: "804196772268",
        appId: "1:804196772268:web:cde0111cd95d8177af3209",
        measurementId: "G-TBKN7HYYRY"
    };

    // State management for the application
    const [posts, setPosts] = useState([]);
    const [db, setDb] = useState(null);
    const [auth, setAuth] = useState(null);
    const [userId, setUserId] = useState(null);
    const [message, setMessage] = useState('');
    const [messageType, setMessageType] = useState('info');
    const [currentPage, setCurrentPage] = useState('home');
    const [currentPost, setCurrentPost] = useState(null);
    const [sorting, setSorting] = useState('newest'); // 'newest' or 'popular'
    const [commentCounts, setCommentCounts] = useState({});

    // Global variables provided by the environment
    const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
    const initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;

    // Helper function to show a temporary notification message
    const showMessage = (text, type = 'info') => {
        setMessage(text);
        setMessageType(type);
        setTimeout(() => setMessage(''), 3000);
    };

    // --- Firebase Initialization and Authentication ---
    useEffect(() => {
        try {
            const app = initializeApp(firebaseConfig);
            const firestore = getFirestore(app);
            const firebaseAuth = getAuth(app);
            setDb(firestore);
            setAuth(firebaseAuth);

            const unsubscribe = onAuthStateChanged(firebaseAuth, async (user) => {
                if (user) {
                    setUserId(user.uid);
                    console.log("User authenticated:", user.uid);
                } else {
                    console.log("No user signed in. Signing in anonymously...");
                    try {
                        if (initialAuthToken) {
                            await signInWithCustomToken(firebaseAuth, initialAuthToken);
                        } else {
                            await signInAnonymously(firebaseAuth);
                        }
                    } catch (error) {
                        console.error("Authentication failed:", error);
                        showMessage("Authentication failed.", "error");
                    }
                }
            });

            return () => unsubscribe();
        } catch (error) {
            console.error("Firebase initialization failed:", error);
            showMessage("Firebase initialization failed. Check your config.", "error");
        }
    }, [initialAuthToken]);

    // --- Firestore Data Fetching ---
    useEffect(() => {
        if (!db || !userId) return;

        const postsCollection = collection(db, `/artifacts/${appId}/public/data/posts`);
        const q = query(postsCollection);

        const unsubscribePosts = onSnapshot(q, (snapshot) => {
            const fetchedPosts = snapshot.docs.map(doc => ({
                id: doc.id,
                ...doc.data(),
            }));

            // Apply sorting logic
            let sortedPosts = [...fetchedPosts];
            if (sorting === 'newest') {
                sortedPosts.sort((a, b) => b.createdAt - a.createdAt);
            } else if (sorting === 'popular') {
                sortedPosts.sort((a, b) => (b.upvotes?.length || 0) - (a.upvotes?.length || 0));
            }
            setPosts(sortedPosts);

            // Fetch comment counts for each post
            const counts = {};
            fetchedPosts.forEach(post => {
                const commentsCollection = collection(db, `/artifacts/${appId}/public/data/posts/${post.id}/comments`);
                // Use a separate listener for each post's comment count
                onSnapshot(commentsCollection, (commentSnapshot) => {
                    counts[post.id] = commentSnapshot.size;
                    setCommentCounts({...counts});
                });
            });

        }, (error) => {
            console.error("Error fetching posts:", error);
            showMessage("Error fetching posts.", "error");
        });

        return () => unsubscribePosts();
    }, [db, userId, appId, sorting]);


    // --- Core Functionality Handlers ---
    const handlePostSubmit = async ({ title, content, photoUrl }) => {
        if (!userId) {
            showMessage("Authentication not ready. Please wait.", "error");
            return;
        }
        if (title.trim() === '' || content.trim() === '') {
            showMessage("Title and content cannot be empty.", "error");
            return;
        }

        try {
            await addDoc(collection(db, `/artifacts/${appId}/public/data/posts`), {
                title,
                content,
                photoUrl,
                userId,
                createdAt: Date.now(),
                upvotes: [],
                downvotes: [],
            });
            showMessage("Post created successfully!", "success");
            setCurrentPage('home');
        } catch (e) {
            console.error("Error adding document: ", e);
            showMessage("Error creating post.", "error");
        }
    };

    const handlePostUpdate = async ({ title, content, photoUrl }) => {
        if (!userId || !currentPost?.id) {
            showMessage("Cannot update post. Invalid user or post ID.", "error");
            return;
        }
        if (title.trim() === '' || content.trim() === '') {
            showMessage("Title and content cannot be empty.", "error");
            return;
        }

        try {
            const postRef = doc(db, `/artifacts/${appId}/public/data/posts`, currentPost.id);
            await updateDoc(postRef, {
                title,
                content,
                photoUrl,
            });
            showMessage("Post updated successfully!", "success");
            setCurrentPost({ ...currentPost, title, content, photoUrl });
            setCurrentPage('post-detail');
        } catch (e) {
            console.error("Error updating document: ", e);
            showMessage("Error updating post.", "error");
        }
    };

    const handlePostDelete = async (postId) => {
        if (!userId) {
            showMessage("You must be authenticated to delete posts.", "error");
            return;
        }
        // Only allow post creator to delete their post
        const post = posts.find(p => p.id === postId);
        if (post.userId !== userId) {
            showMessage("You can only delete your own posts.", "error");
            return;
        }

        try {
            const postRef = doc(db, `/artifacts/${appId}/public/data/posts`, postId);
            await deleteDoc(postRef);
            showMessage("Post deleted successfully!", "success");
            setCurrentPage('home');
        } catch (e) {
            console.error("Error deleting document: ", e);
            showMessage("Error deleting post.", "error");
        }
    };

    const handleVote = async (postId, type) => {
        if (!userId) {
            showMessage("You must be authenticated to vote.", "error");
            return;
        }

        const postRef = doc(db, `/artifacts/${appId}/public/data/posts`, postId);
        const post = posts.find(p => p.id === postId);
        
        let newUpvotes = [...(post.upvotes || [])];
        let newDownvotes = [...(post.downvotes || [])];

        try {
            if (type === 'upvote') {
                if (newUpvotes.includes(userId)) {
                    newUpvotes = newUpvotes.filter(id => id !== userId);
                    await updateDoc(postRef, { upvotes: arrayRemove(userId) });
                } else {
                    newUpvotes.push(userId);
                    newDownvotes = newDownvotes.filter(id => id !== userId);
                    await updateDoc(postRef, {
                        upvotes: arrayUnion(userId),
                        downvotes: arrayRemove(userId)
                    });
                }
            } else if (type === 'downvote') {
                if (newDownvotes.includes(userId)) {
                    newDownvotes = newDownvotes.filter(id => id !== userId);
                    await updateDoc(postRef, { downvotes: arrayRemove(userId) });
                } else {
                    newDownvotes.push(userId);
                    newUpvotes = newUpvotes.filter(id => id !== userId);
                    await updateDoc(postRef, {
                        downvotes: arrayUnion(userId),
                        upvotes: arrayRemove(userId)
                    });
                }
            }
            
            // Immediately update the currentPost state to reflect the change
            setCurrentPost({ ...currentPost, upvotes: newUpvotes, downvotes: newDownvotes });
            showMessage("Vote updated!", "success");

        } catch (error) {
            console.error("Error updating vote:", error);
            showMessage("Error updating vote.", "error");
        }
    };

    // --- Page Routing Logic ---
    const renderPage = () => {
        switch (currentPage) {
            case 'home':
                return <HomeFeed />;
            case 'create-post':
                return <CreatePostForm onSubmit={handlePostSubmit} />;
            case 'post-detail':
                return <PostDetail />;
            case 'update-post':
                return <UpdatePostForm onSubmit={handlePostUpdate} currentPost={currentPost} />;
            default:
                return <HomeFeed />;
        }
    };

    // --- Component Definitions (UI) ---
    const HomeFeed = () => (
        <>
            <div className="flex-between-center mb-4">
                <h2 className="text-2xl font-bold text-gray-800">Recent Posts</h2>
                <div className="flex-gap-2">
                    <button
                        onClick={() => setSorting('newest')}
                        className={`sort-button ${sorting === 'newest' ? 'active' : ''}`}
                    >
                        Newest
                    </button>
                    <button
                        onClick={() => setSorting('popular')}
                        className={`sort-button ${sorting === 'popular' ? 'active' : ''}`}
                    >
                        Most Popular
                    </button>
                </div>
            </div>
            <div id="posts-container">
                {posts.length === 0 ? (
                    <p className="empty-state">
                        {userId ? 'No posts yet. Be the first to create one!' : 'Loading posts...'}
                    </p>
                ) : (
                    posts.map(post => (
                        <div key={post.id} className="post-card">
                            <h3 className="post-title">{post.title}</h3>
                            <p className="post-content">{post.content}</p>
                            <div className="post-footer">
                                <div className="post-meta">
                                    <div className="meta-item">
                                        <svg xmlns="http://www.w3.org/2000/svg" className="icon" fill="currentColor" viewBox="0 0 24 24" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M12 19V5M5 12l7-7 7 7"/></svg>
                                        <span className="font-bold">{post.upvotes?.length || 0}</span>
                                    </div>
                                    <div className="meta-item">
                                        <svg xmlns="http://www.w3.org/2000/svg" className="icon" fill="currentColor" viewBox="0 0 24 24" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M12 5v14M19 12l-7 7-7-7"/></svg>
                                        <span className="font-bold">{post.downvotes?.length || 0}</span>
                                    </div>
                                    <div className="meta-item">
                                        <span>Comments: {commentCounts[post.id] || 0}</span>
                                    </div>
                                </div>
                                <button
                                    onClick={() => {
                                        setCurrentPost(post);
                                        setCurrentPage('post-detail');
                                    }}
                                    className="link-button"
                                >
                                    View Post
                                </button>
                            </div>
                        </div>
                    ))
                )}
            </div>
        </>
    );

    const CreatePostForm = ({ onSubmit }) => {
        const [title, setTitle] = useState('');
        const [content, setContent] = useState('');
        const [photoUrl, setPhotoUrl] = useState('');

        const handleSubmit = (e) => {
            e.preventDefault();
            onSubmit({ title, content, photoUrl });
            setTitle('');
            setContent('');
            setPhotoUrl('');
        };

        return (
            <div className="form-card">
                <h2 className="form-title">Create a New Post</h2>
                <form onSubmit={handleSubmit}>
                    <div className="form-group">
                        <label htmlFor="post-title" className="form-label">Title</label>
                        <input
                            type="text"
                            id="post-title"
                            value={title}
                            onChange={(e) => setTitle(e.target.value)}
                            className="form-input"
                            required
                        />
                    </div>
                    <div className="form-group">
                        <label htmlFor="post-content" className="form-label">Content</label>
                        <textarea
                            id="post-content"
                            rows="6"
                            value={content}
                            onChange={(e) => setContent(e.target.value)}
                            className="form-input"
                            required
                        ></textarea>
                    </div>
                    <div className="form-group">
                        <label htmlFor="post-photo" className="form-label">Photo URL</label>
                        <input
                            type="url"
                            id="post-photo"
                            value={photoUrl}
                            onChange={(e) => setPhotoUrl(e.target.value)}
                            className="form-input"
                        />
                    </div>
                    <button
                        type="submit"
                        className="form-submit-button"
                    >
                        Create Post
                    </button>
                </form>
            </div>
        );
    };

    const PostDetail = () => (
        <div className="post-detail-card">
            <button
                onClick={() => {
                    setCurrentPost(null);
                    setCurrentPage('home');
                }}
                className="back-button"
            >
                <svg xmlns="http://www.w3.org/2000/svg" className="back-icon" viewBox="0 0 20 20" fill="currentColor"><path fillRule="evenodd" d="M9.707 16.707a1 1 0 01-1.414 0l-6-6a1 1 0 010-1.414l6-6a1 1 0 011.414 1.414L5.414 9H17a1 1 0 110 2H5.414l4.293 4.293a1 1 0 010 1.414z" clipRule="evenodd" /></svg>
                Back to Home
            </button>
            {currentPost ? (
                <>
                    <h1 className="post-detail-title">{currentPost.title}</h1>
                    <div className="post-detail-meta">
                        <span>Posted by: {currentPost.userId.substring(0, 8)}...</span>
                        <span>{new Date(currentPost.createdAt).toLocaleString()}</span>
                    </div>

                    {currentPost.photoUrl && (
                        <div className="post-image-container">
                            <img src={currentPost.photoUrl} alt={currentPost.title} className="post-detail-image" />
                        </div>
                    )}

                    <p className="post-detail-content">{currentPost.content}</p>

                    <div className="flex-between-center post-actions">
                        <div className="vote-section">
                            {/* Upvote button */}
                            <button
                                onClick={() => handleVote(currentPost.id, 'upvote')}
                                className={`vote-button ${currentPost.upvotes?.includes(userId) ? 'upvote-active' : ''}`}
                            >
                                <svg xmlns="http://www.w3.org/2000/svg" className="icon" fill="currentColor" viewBox="0 0 24 24" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M12 19V5M5 12l7-7 7 7"/></svg>
                                <span className="vote-count">{currentPost.upvotes?.length || 0}</span>
                            </button>
                            
                            {/* Downvote button */}
                            <button
                                onClick={() => handleVote(currentPost.id, 'downvote')}
                                className={`vote-button ${currentPost.downvotes?.includes(userId) ? 'downvote-active' : ''}`}
                            >
                                <svg xmlns="http://www.w3.org/2000/svg" className="icon" fill="currentColor" viewBox="0 0 24 24" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M12 5v14M19 12l-7 7-7-7"/></svg>
                                <span className="vote-count">{currentPost.downvotes?.length || 0}</span>
                            </button>
                        </div>

                        {currentPost.userId === userId && (
                            <div className="action-buttons">
                                <button
                                    onClick={() => {
                                        setCurrentPage('update-post');
                                    }}
                                    className="link-button"
                                >
                                    Update
                                </button>
                                <div className="divider"></div>
                                <button
                                    onClick={() => handlePostDelete(currentPost.id)}
                                    className="link-button delete-button"
                                >
                                    Delete
                                </button>
                            </div>
                        )}
                    </div>
                    
                    {/* Comments Section is now a dedicated component */}
                    <CommentSection postId={currentPost.id} userId={userId} db={db} appId={appId} showMessage={showMessage} />
                </>
            ) : (
                <p className="empty-state">Post not found.</p>
            )}
        </div>
    );

    // New dedicated component for the comments section
    const CommentSection = ({ postId, userId, db, appId, showMessage }) => {
        const [comments, setComments] = useState([]);
        const [commentContent, setCommentContent] = useState('');
        const [editingCommentId, setEditingCommentId] = useState(null);
        const [editingCommentContent, setEditingCommentContent] = useState('');

        useEffect(() => {
            if (!db || !postId) return;
            const commentsCollection = collection(db, `/artifacts/${appId}/public/data/posts/${postId}/comments`);
            const unsubscribe = onSnapshot(commentsCollection, (snapshot) => {
                const fetchedComments = snapshot.docs.map(doc => ({
                    id: doc.id,
                    ...doc.data(),
                }));
                fetchedComments.sort((a, b) => b.createdAt - a.createdAt);
                setComments(fetchedComments);
            });
            return () => unsubscribe();
        }, [db, postId, appId]);

        const handleCommentSubmit = async (e) => {
            e.preventDefault();
            if (!userId) {
                showMessage("You must be authenticated to comment.", "error");
                return;
            }
            if (commentContent.trim() === '') {
                showMessage("Comment cannot be empty.", "error");
                return;
            }

            try {
                const commentsCollection = collection(db, `/artifacts/${appId}/public/data/posts/${postId}/comments`);
                await addDoc(commentsCollection, {
                    content: commentContent,
                    userId,
                    createdAt: Date.now(),
                });
                setCommentContent('');
                showMessage("Comment added successfully!", "success");
            } catch (error) {
                console.error("Error adding comment: ", error);
                showMessage("Error adding comment.", "error");
            }
        };

        const handleUpdateComment = async (e, commentId) => {
            e.preventDefault();
            if (editingCommentContent.trim() === '') {
                showMessage("Comment cannot be empty.", "error");
                return;
            }
            try {
                const commentRef = doc(db, `/artifacts/${appId}/public/data/posts/${postId}/comments`, commentId);
                await updateDoc(commentRef, { content: editingCommentContent });
                setEditingCommentId(null);
                setEditingCommentContent('');
                showMessage("Comment updated successfully!", "success");
            } catch (error) {
                console.error("Error updating comment:", error);
                showMessage("Error updating comment.", "error");
            }
        };

        return (
            <div className="comments-section">
                <h4 className="comments-title">Comments ({comments.length})</h4>
                
                {/* Comment form */}
                <form onSubmit={handleCommentSubmit} className="comment-form">
                    <textarea
                        rows="2"
                        value={commentContent}
                        onChange={(e) => setCommentContent(e.target.value)}
                        className="form-input"
                        placeholder="Add a comment..."
                        required
                    ></textarea>
                    <button
                        type="submit"
                        className="comment-submit-button"
                    >
                        Add Comment
                    </button>
                </form>

                {/* Comment list */}
                {comments.length === 0 ? (
                    <p className="empty-state">No comments yet.</p>
                ) : (
                    comments.map(comment => (
                        <div key={comment.id} className="comment-item">
                            {editingCommentId === comment.id ? (
                                <form onSubmit={(e) => handleUpdateComment(e, comment.id)}>
                                    <textarea
                                        rows="2"
                                        value={editingCommentContent}
                                        onChange={(e) => setEditingCommentContent(e.target.value)}
                                        className="form-input"
                                        required
                                    />
                                    <div className="edit-comment-actions">
                                        <button type="submit" className="save-button">Save</button>
                                        <button type="button" onClick={() => setEditingCommentId(null)} className="cancel-button">Cancel</button>
                                    </div>
                                </form>
                            ) : (
                                <>
                                    <p className="comment-text">{comment.content}</p>
                                    <div className="comment-meta flex-between-center">
                                        <div>
                                            <span>By: {comment.userId.substring(0, 8)}...</span>
                                            <span className="ml-4">{new Date(comment.createdAt).toLocaleString()}</span>
                                        </div>
                                        {comment.userId === userId && (
                                            <button
                                                onClick={() => {
                                                    setEditingCommentId(comment.id);
                                                    setEditingCommentContent(comment.content);
                                                }}
                                                className="link-button"
                                            >
                                                Edit
                                            </button>
                                        )}
                                    </div>
                                </>
                            )}
                        </div>
                    ))
                )}
            </div>
        );
    };

    const UpdatePostForm = ({ onSubmit, currentPost }) => {
        const [title, setTitle] = useState(currentPost?.title || '');
        const [content, setContent] = useState(currentPost?.content || '');
        const [photoUrl, setPhotoUrl] = useState(currentPost?.photoUrl || '');

        const handleSubmit = (e) => {
            e.preventDefault();
            onSubmit({ title, content, photoUrl });
        };

        return (
            <div className="form-card">
                <button
                    onClick={() => setCurrentPage('post-detail')}
                    className="back-button"
                >
                    <svg xmlns="http://www.w3.org/2000/svg" className="back-icon" viewBox="0 0 20 20" fill="currentColor"><path fillRule="evenodd" d="M9.707 16.707a1 1 0 01-1.414 0l-6-6a1 1 0 010-1.414l6-6a1 1 0 011.414 1.414L5.414 9H17a1 1 0 110 2H5.414l4.293 4.293a1 1 0 010 1.414z" clipRule="evenodd" /></svg>
                    Back to Post
                </button>
                <h2 className="form-title">Update Post</h2>
                <form onSubmit={handleSubmit}>
                    <div className="form-group">
                        <label htmlFor="update-title" className="form-label">Title</label>
                        <input
                            type="text"
                            id="update-title"
                            value={title}
                            onChange={(e) => setTitle(e.target.value)}
                            className="form-input"
                            required
                        />
                    </div>
                    <div className="form-group">
                        <label htmlFor="update-content" className="form-label">Content</label>
                        <textarea
                            id="update-content"
                            rows="6"
                            value={content}
                            onChange={(e) => setContent(e.target.value)}
                            className="form-input"
                            required
                        ></textarea>
                    </div>
                    <div className="form-group">
                        <label htmlFor="update-photo" className="form-label">Photo URL</label>
                        <input
                            type="url"
                            id="update-photo"
                            value={photoUrl}
                            onChange={(e) => setPhotoUrl(e.target.value)}
                            className="form-input"
                        />
                    </div>
                    <button
                        type="submit"
                        className="form-submit-button"
                    >
                        Update Post
                    </button>
                </form>
            </div>
        );
    };

    return (
        <div className="app-container">
            <div className="main-content-wrapper">
                <header className="header-card">
                    <div className="flex-between-center mb-4">
                        <h1 className="logo">
                            Gemini Forum
                        </h1>
                        <nav className="nav-buttons">
                            <button onClick={() => setCurrentPage('home')} className="nav-link">Home</button>
                            <button onClick={() => setCurrentPage('create-post')} className="create-button">Create Post</button>
                        </nav>
                    </div>
                    <p className="user-id">
                        {userId ? `User ID: ${userId}` : 'Authenticating...'}
                    </p>
                </header>

                <main>
                    {renderPage()}
                </main>

                {/* Message box for notifications */}
                {message && (
                    <div className={`message-box ${messageType}`}>
                        {message}
                    </div>
                )}
            </div>
        </div>
    );
};

export default App;

