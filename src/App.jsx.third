import React, { useState, useEffect } from "react";
import { initializeApp } from "firebase/app";
import { getAuth, signInWithCustomToken, signInAnonymously, onAuthStateChanged } from "firebase/auth";
import { getFirestore, collection, onSnapshot, addDoc, query, doc, updateDoc, arrayUnion, arrayRemove } from "firebase/firestore";

// The main application component
const App = () => {
    // Provided Firebase configuration
    const firebaseConfig = {
        apiKey: "AIzaSyDMf8dxE76Cg2WInANZCIPZ7fC31ni2AX4",
        authDomain: "forum-6180f.firebaseapp.com",
        projectId: "forum-6180f",
        storageBucket: "forum-6180f.firebasestorage.app",
        messagingSenderId: "804196772268",
        appId: "1:804196772268:web:cde0111cd95d8177af3209",
        measurementId: "G-TBKN7HYYRY"
    };

    // State variables for authentication and data
    const [posts, setPosts] = useState([]);
    const [title, setTitle] = useState('');
    const [content, setContent] = useState('');
    const [db, setDb] = useState(null);
    const [auth, setAuth] = useState(null);
    const [userId, setUserId] = useState(null);
    const [message, setMessage] = useState('');
    const [messageType, setMessageType] = useState('info');
    const [activePostId, setActivePostId] = useState(null);
    const [comments, setComments] = useState([]);
    const [commentContent, setCommentContent] = useState('');

    // Global variables provided by the environment
    const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
    const initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;

    // Show a notification message to the user
    const showMessage = (text, type = 'info') => {
        setMessage(text);
        setMessageType(type);
        setTimeout(() => setMessage(''), 3000);
    };

    // Initialize Firebase and handle authentication
    useEffect(() => {
        try {
            const app = initializeApp(firebaseConfig);
            const firestore = getFirestore(app);
            const firebaseAuth = getAuth(app);
            setDb(firestore);
            setAuth(firebaseAuth);

            const unsubscribe = onAuthStateChanged(firebaseAuth, async (user) => {
                if (user) {
                    setUserId(user.uid);
                    console.log("User authenticated:", user.uid);
                } else {
                    console.log("No user signed in. Signing in anonymously...");
                    try {
                        if (initialAuthToken) {
                            await signInWithCustomToken(firebaseAuth, initialAuthToken);
                        } else {
                            await signInAnonymously(firebaseAuth);
                        }
                    } catch (error) {
                        console.error("Authentication failed:", error);
                        showMessage("Authentication failed.", "error");
                    }
                }
            });

            return () => unsubscribe();
        } catch (error) {
            console.error("Firebase initialization failed:", error);
            showMessage("Firebase initialization failed. Check your config.", "error");
        }
    }, [initialAuthToken]);

    // Firestore listener for posts
    useEffect(() => {
        if (!db || !userId) return;

        const postsCollection = collection(db, `/artifacts/${appId}/public/data/posts`);
        const q = query(postsCollection);
        
        const unsubscribe = onSnapshot(q, (snapshot) => {
            const fetchedPosts = snapshot.docs.map(doc => ({
                id: doc.id,
                ...doc.data(),
            }));
            // Sort by creation time (newest first)
            fetchedPosts.sort((a, b) => b.createdAt - a.createdAt);
            setPosts(fetchedPosts);
        }, (error) => {
            console.error("Error fetching posts:", error);
            showMessage("Error fetching posts.", "error");
        });

        return () => unsubscribe();
    }, [db, userId, appId]);

    // Firestore listener for comments on a specific post
    useEffect(() => {
        if (!db || !activePostId) {
            setComments([]);
            return;
        }
        
        const commentsCollection = collection(db, `/artifacts/${appId}/public/data/posts/${activePostId}/comments`);
        const unsubscribe = onSnapshot(commentsCollection, (snapshot) => {
            const fetchedComments = snapshot.docs.map(doc => ({
                id: doc.id,
                ...doc.data(),
            }));
            // Sort by creation time (newest first)
            fetchedComments.sort((a, b) => b.createdAt - a.createdAt);
            setComments(fetchedComments);
        }, (error) => {
            console.error("Error fetching comments:", error);
            showMessage("Error fetching comments.", "error");
        });

        return () => unsubscribe();
    }, [db, activePostId, appId]);

    // Handles post submission
    const handlePostSubmit = async (e) => {
        e.preventDefault();
        if (!userId) {
            showMessage("Authentication not ready. Please wait.", "error");
            return;
        }
        if (title.trim() === '' || content.trim() === '') {
            showMessage("Title and content cannot be empty.", "error");
            return;
        }

        try {
            await addDoc(collection(db, `/artifacts/${appId}/public/data/posts`), {
                title,
                content,
                userId,
                createdAt: Date.now(),
                upvotes: [], // Initialize upvotes as an empty array
                downvotes: [], // Initialize downvotes as an empty array
            });
            setTitle('');
            setContent('');
            showMessage("Post created successfully!", "success");
        } catch (e) {
            console.error("Error adding document: ", e);
            showMessage("Error creating post.", "error");
        }
    };

    // Handles upvoting/downvoting a post
    const handleVote = async (postId, type) => {
        if (!userId) {
            showMessage("You must be authenticated to vote.", "error");
            return;
        }

        const postRef = doc(db, `/artifacts/${appId}/public/data/posts`, postId);

        // Check if the user has already upvoted or downvoted this post
        const post = posts.find(p => p.id === postId);
        const upvoted = post.upvotes?.includes(userId);
        const downvoted = post.downvotes?.includes(userId);

        try {
            if (type === 'upvote') {
                if (upvoted) {
                    await updateDoc(postRef, { upvotes: arrayRemove(userId) });
                } else {
                    let updateData = { upvotes: arrayUnion(userId) };
                    if (downvoted) {
                        updateData.downvotes = arrayRemove(userId);
                    }
                    await updateDoc(postRef, updateData);
                }
            } else if (type === 'downvote') {
                if (downvoted) {
                    await updateDoc(postRef, { downvotes: arrayRemove(userId) });
                } else {
                    let updateData = { downvotes: arrayUnion(userId) };
                    if (upvoted) {
                        updateData.upvotes = arrayRemove(userId);
                    }
                    await updateDoc(postRef, updateData);
                }
            }
        } catch (error) {
            console.error("Error updating vote:", error);
            showMessage("Error updating vote.", "error");
        }
    };

    // Handles comment submission
    const handleCommentSubmit = async (e, postId) => {
        e.preventDefault();
        if (!userId) {
            showMessage("You must be authenticated to comment.", "error");
            return;
        }
        if (commentContent.trim() === '') {
            showMessage("Comment cannot be empty.", "error");
            return;
        }
        
        try {
            const commentsCollection = collection(db, `/artifacts/${appId}/public/data/posts/${postId}/comments`);
            await addDoc(commentsCollection, {
                content: commentContent,
                userId,
                createdAt: Date.now(),
            });
            setCommentContent('');
            showMessage("Comment added successfully!", "success");
        } catch (error) {
            console.error("Error adding comment: ", error);
            showMessage("Error adding comment.", "error");
        }
    };

    return (
        <div className="bg-gray-100 min-h-screen font-sans p-4 sm:p-8 flex items-center justify-center">
            <div className="w-full max-w-4xl mx-auto">
                <header className="bg-white p-6 rounded-lg shadow-lg mb-8 rounded-xl">
                    <h1 className="text-4xl font-extrabold text-gray-900 text-center">
                        Gemini Forum App
                    </h1>
                    <p className="text-center text-gray-500 text-sm mt-2">
                        {userId ? `User ID: ${userId}` : 'Authenticating...'}
                    </p>
                </header>

                <main className="grid grid-cols-1 md:grid-cols-3 gap-8">
                    {/* Left panel for creating a new post */}
                    <div className="md:col-span-1 bg-white p-6 rounded-lg shadow-lg rounded-xl">
                        <h2 className="text-2xl font-bold text-gray-800 mb-4">Create a New Post</h2>
                        <form onSubmit={handlePostSubmit}>
                            <div className="mb-4">
                                <label htmlFor="post-title" className="block text-gray-700 font-medium mb-1">Title</label>
                                <input
                                    type="text"
                                    id="post-title"
                                    value={title}
                                    onChange={(e) => setTitle(e.target.value)}
                                    className="w-full p-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 transition-colors"
                                    required
                                />
                            </div>
                            <div className="mb-4">
                                <label htmlFor="post-content" className="block text-gray-700 font-medium mb-1">Content</label>
                                <textarea
                                    id="post-content"
                                    rows="6"
                                    value={content}
                                    onChange={(e) => setContent(e.target.value)}
                                    className="w-full p-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 transition-colors"
                                    required
                                ></textarea>
                            </div>
                            <button
                                type="submit"
                                className="w-full bg-blue-600 text-white font-bold py-3 px-4 rounded-lg shadow-md hover:bg-blue-700 transition-colors disabled:bg-gray-400"
                            >
                                Post
                            </button>
                        </form>
                    </div>

                    {/* Right panel for displaying posts */}
                    <div className="md:col-span-2">
                        <h2 className="text-2xl font-bold text-gray-800 mb-4">Recent Posts</h2>
                        <div id="posts-container">
                            {posts.length === 0 ? (
                                <p className="text-gray-500 text-center py-8">
                                    {userId ? 'No posts yet. Be the first to create one!' : 'Loading posts...'}
                                </p>
                            ) : (
                                posts.map(post => (
                                    <div key={post.id} className="bg-white p-6 rounded-lg shadow-lg mb-6 rounded-xl">
                                        <h3 className="text-2xl font-bold text-gray-800 mb-2">{post.title}</h3>
                                        <p className="text-gray-600 mb-4">{post.content}</p>
                                        
                                        <div className="flex items-center justify-between text-sm text-gray-400">
                                            <span className="mr-4">Posted by: {post.userId.substring(0, 8)}...</span>
                                            <span>{new Date(post.createdAt).toLocaleString()}</span>
                                        </div>

                                        <div className="flex items-center mt-4 border-t pt-4 border-gray-200">
                                            <button
                                                onClick={() => handleVote(post.id, 'upvote')}
                                                className={`flex items-center text-gray-500 hover:text-green-500 transition-colors mr-4 ${post.upvotes?.includes(userId) ? 'text-green-500' : ''}`}
                                            >
                                                <svg className="w-5 h-5 mr-1" fill="currentColor" viewBox="0 0 20 20">
                                                    <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm-1-8H6a1 1 0 010-2h3V6a1 1 0 012 0v2h3a1 1 0 010 2h-3v3a1 1 0 01-2 0v-3z" clipRule="evenodd" />
                                                </svg>
                                                <span className="font-bold">{post.upvotes?.length || 0}</span>
                                            </button>
                                            <button
                                                onClick={() => handleVote(post.id, 'downvote')}
                                                className={`flex items-center text-gray-500 hover:text-red-500 transition-colors ${post.downvotes?.includes(userId) ? 'text-red-500' : ''}`}
                                            >
                                                <svg className="w-5 h-5 mr-1" fill="currentColor" viewBox="0 0 20 20">
                                                    <path fillRule="evenodd" d="M10 2a8 8 0 100 16 8 8 0 000-16zm-1 9H6a1 1 0 010-2h3V6a1 1 0 012 0v3h3a1 1 0 010 2h-3v3a1 1 0 01-2 0v-3z" clipRule="evenodd" />
                                                </svg>
                                                <span className="font-bold">{post.downvotes?.length || 0}</span>
                                            </button>

                                            <button
                                                onClick={() => setActivePostId(activePostId === post.id ? null : post.id)}
                                                className="ml-auto text-blue-500 hover:underline"
                                            >
                                                {activePostId === post.id ? 'Hide Comments' : 'Show Comments'}
                                            </button>
                                        </div>

                                        {/* Comments Section */}
                                        {activePostId === post.id && (
                                            <div className="mt-6 border-t pt-6 border-gray-200">
                                                <h4 className="text-xl font-bold text-gray-800 mb-4">Comments ({comments.length})</h4>
                                                
                                                {/* Comment form */}
                                                <form onSubmit={(e) => handleCommentSubmit(e, post.id)} className="mb-4">
                                                    <textarea
                                                        rows="2"
                                                        value={commentContent}
                                                        onChange={(e) => setCommentContent(e.target.value)}
                                                        className="w-full p-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 transition-colors"
                                                        placeholder="Add a comment..."
                                                        required
                                                    ></textarea>
                                                    <button
                                                        type="submit"
                                                        className="mt-2 w-full bg-green-600 text-white font-bold py-2 px-4 rounded-lg shadow-md hover:bg-green-700 transition-colors"
                                                    >
                                                        Add Comment
                                                    </button>
                                                </form>

                                                {/* Comment list */}
                                                {comments.length === 0 ? (
                                                    <p className="text-gray-500 text-center py-4">No comments yet.</p>
                                                ) : (
                                                    comments.map(comment => (
                                                        <div key={comment.id} className="bg-gray-50 p-4 rounded-lg mb-3 shadow-sm">
                                                            <p className="text-gray-700">{comment.content}</p>
                                                            <div className="text-sm text-gray-400 mt-2">
                                                                <span>By: {comment.userId.substring(0, 8)}...</span>
                                                                <span className="ml-4">{new Date(comment.createdAt).toLocaleString()}</span>
                                                            </div>
                                                        </div>
                                                    ))
                                                )}
                                            </div>
                                        )}
                                    </div>
                                ))
                            )}
                        </div>
                    </div>
                </main>

                {/* Message box for notifications */}
                {message && (
                    <div className={`fixed bottom-4 right-4 p-4 rounded-lg shadow-lg text-sm transition-all duration-300 ${messageType === 'success' ? 'bg-green-500 text-white' : 'bg-red-500 text-white'}`}>
                        {message}
                    </div>
                )}
            </div>
        </div>
    );
};

export default App;
